#!/bin/sh

# FIXES https://github.com/ValveSoftware/steam-for-linux/issues/5607 & https://github.com/ValveSoftware/steam-for-linux/issues/1890

# # # # # # # # # # # # # # # # # # # # # # # #
# # THIS SCRIPT MUST BE IN $HOME/.local/bin # # 
# # And must be named steam (in lowercase)  # #
# # # # # # # # # # # # # # # # # # # # # # # #

APPHOME="$XDG_DATA_HOME/Steam/HOME"
APPEXEC="/usr/bin/steam" # Replace this to the right path to steam if it is not in /usr/bin/steam
APPDESKTOP="/usr/share/applications/steam.desktop" # Might be in a different location in some distros.
STEAMPRELOAD="$HOME/.local/lib/steam"

# SAFETY CHECKS
if ! echo "$PATH" | grep .local/bin >/dev/null 2>&1; then echo 'You have to export PATH="$HOME/.local/bin:$PATH" for this script to work'; exit 1; fi
if ! command -v "$APPEXEC" >/dev/null 2>&1; then echo 'Steam is not installed or $APPEXEC has the wrong path to steam'; exit 1; fi
if ! command -v gcc >/dev/null 2>&1; then echo "You need to install gcc for this to work"; exit 1; fi
[ ! -e /usr/include/gnu/stubs-32.h ] && echo "Could not find /usr/include/gnu/stubs-32.h which is needed for this script to work" && exit 1
[ ! -e "$HOME/.local/bin/steam" ] && echo "RTFM!" && exit 1

if [ -z "$XDG_CACHE_HOME" ] || [ -z "$XDG_CONFIG_HOME" ] || [ -z "$XDG_DATA_HOME" ] || [ -z "$XDG_STATE_HOME" ]; then
	echo "One or more XDG Base dir variables not defined, bailing out"; exit 1
fi

if [ -z "$APPHOME" ] || [ -z "$APPEXEC" ] || [ -z "$APPDESKTOP" ] || [ -z "$STEAMPRELOAD" ]; then
	echo "You broke the script badly, like what were you thinking?"; exit 1
fi

# PATCH STEAM DESKTOP FILE
if ! ls "$XDG_DATA_HOME"/applications/*steam.desktop >/dev/null 2>&1; then
	cp "$APPDESKTOP" "$XDG_DATA_HOME"/applications/steam.desktop || { echo "Couldn't copy $APPDESKTOP" & exit 1; }
fi

if ! grep "Exec=steam-runtime %U" "$XDG_DATA_HOME"/applications/*steam.desktop >/dev/null 2>&1; then
	sed -i "s#Exec=[^ ]*#Exec=steam-runtime#g" "$XDG_DATA_HOME"/applications/*steam.desktop && echo "patched steam.desktop"
fi

# MAKE APPHOME AND LINKS
mkdir -p "$APPHOME/.local" "$XDG_DATA_HOME/pki" "$XDG_DATA_HOME/icons" 2>/dev/null
[ ! -e "$HOME/.local/bin/steam-runtime" ] && ln -s "$HOME/.local/bin/steam" "$HOME/.local/bin/steam-runtime"
[ ! -e "$APPHOME/.local/share" ] && ln -s "$XDG_DATA_HOME" "$APPHOME/.local/share"
[ ! -e "$APPHOME/.local/state" ] && ln -s "$XDG_STATE_HOME" "$APPHOME/.local/state"
[ ! -e "$APPHOME/.config" ] && ln -s "$XDG_CONFIG_HOME" "$APPHOME/.config"
[ ! -e "$APPHOME/.cache" ] && ln -s "$XDG_CACHE_HOME" "$APPHOME/.cache"
[ ! -e "$APPHOME/.icons" ] && ln -s "$XDG_DATA_HOME/icons" "$APPHOME/.icons" # Some apps have hardcoded ~/.icons path
[ ! -e "$APPHOME/.pki" ] && ln -s "$XDG_DATA_HOME/pki" "$APPHOME/.pki" # Chromium/electron hardcode ~/.pki

find "$APPHOME" -xtype l -delete # Clears broken links
for FILES in "$HOME"/*; do # Symlinks other files in $HOME to $APPHOME
    FILENAME=$(basename "$FILES")
    DEST="$APPHOME/$FILENAME"
    if [ ! -e "$DEST" ]; then
        ln -s "$FILES" "$DEST"
    fi
done

[ ! -e "$APPHOME/Desktop" ] && ln -s "$HOME" "$APPHOME/Desktop" # Makes steam install .desktop of games in $HOME if there is not a ~/Desktop dir

# MAKE LIBRARY THAT FIXES SCREENSAVER ISSUE
if ! [ -d "$STEAMPRELOAD" ]; then
	mkdir -p "$STEAMPRELOAD" && cd "$STEAMPRELOAD" || exit 1
 	cat <<- EOF > sdl_block_screensaver_inhibit.c
	/* sdl_block_screensaver_inhibit.c */
	/* SPDX-License-Identifier: MIT */

	#define _GNU_SOURCE /* RTLD_NEXT is a GNU extension. */
	#include <dlfcn.h>
	#include <stdio.h>
	#include <string.h>
	#include <unistd.h>

	#ifndef __linux__
	#error Platform not supported.
	#endif

	#ifdef __i386__
	#define ARCH "i386"
	#elif defined(__amd64__)
	#define ARCH "amd64"
	#else
	#error Architecture not supported.
	#endif

	static char exe_name[1024];
	static void (*real_function)(void);

	static void vlog(const char* text)
	{
		fprintf(stderr, "[" ARCH "] %s: %s\n", exe_name, text);
	}

	static void call_real_function(void)
	{
		if (real_function == NULL) {
			/* Thankfully SDL_DisableScreenSaver() only exists since SDL
			 * 2.0, else I'd have to detect the SDL version. */
			real_function = dlvsym(RTLD_NEXT, "SDL_DisableScreenSaver", "libSDL2-2.0.so.0");

			if (real_function == NULL)
				real_function = dlsym(RTLD_NEXT, "SDL_DisableScreenSaver");

			/* Oh god I hope it works, I don't want to implement more
			 * libTAS logic... */

			if (real_function != NULL)
				vlog("Successfully linked SDL_DisableScreenSaver().");
		}

		if (real_function != NULL) {
			vlog("Allowing SDL_DisableScreenSaver().");
			real_function();
		} else
			vlog("Could not link SDL_DisableScreenSaver().");
	}

	static int is_steam(void)
	{
		static int inited;
		static int retval;

		if (inited)
			return retval;
		inited = 1;

		{
			const char* last_slash = strrchr(exe_name, '/');
			const char* name;

			if (last_slash == NULL)
				/* Uh, just use the whole string then. */
				name = exe_name;
			else
				name = last_slash + 1;

			retval = strcmp(name, "steam") == 0;
		}

		return retval;
	}

	void SDL_DisableScreenSaver(void)
	{
		if (exe_name[0] == '\0') {
			ssize_t len = readlink("/proc/self/exe", exe_name, sizeof(exe_name) - 1);

			if (len == -1)
				strcpy(exe_name, "(unknown)");
			else
				exe_name[len] = '\0';
		}

		if (is_steam())
			vlog("Prevented SDL_DisableScreenSaver().");
		else
			call_real_function();
	}
	EOF
	gcc -shared -fPIC -ldl -m32 -o sdl_block_screensaver_inhibit_lib32.so sdl_block_screensaver_inhibit.c || exit 1
	gcc -shared -fPIC -ldl -m64 -o sdl_block_screensaver_inhibit_lib64.so sdl_block_screensaver_inhibit.c || exit 1
	rm sdl_block_screensaver_inhibit.c
fi

# START APP AT FAKEHOME WITH SCREENSAVER FIX (STEAM IS LAUNCHED SILENTLY BY DEFAULT).
export LD_PRELOAD="$STEAMPRELOAD/sdl_block_screensaver_inhibit_\$LIB.so"
export SDL_VIDEO_ALLOW_SCREENSAVER=1

if [ -z "$@" ]; then
	HOME="$APPHOME" "$APPEXEC" -nochatui -nofriendsui -silent || notify-send "App not found"
else
	HOME="$APPHOME" "$APPEXEC" "$@" || notify-send "App not found"
fi
